// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A flow for providing AI-driven suggestions to improve a Business Model Canvas (BMC).
 *
 * - getAIImprovementSuggestions - A function that takes a BMC as input and returns improvement suggestions.
 * - GetAIImprovementSuggestionsInput - The input type for the getAIImprovementSuggestions function.
 * - GetAIImprovementSuggestionsOutput - The return type for the getAIImprovementSuggestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GetAIImprovementSuggestionsInputSchema = z.object({
  bmcData: z.record(z.string(), z.string()).describe('The data representing the Business Model Canvas, where keys are BMC sections and values are their content.'),
  businessDescription: z.string().describe('A brief description of the business for context.'),
});
export type GetAIImprovementSuggestionsInput = z.infer<typeof GetAIImprovementSuggestionsInputSchema>;

const GetAIImprovementSuggestionsOutputSchema = z.object({
  suggestions: z.array(z.string()).describe('An array of AI-generated suggestions for improving the BMC.'),
});
export type GetAIImprovementSuggestionsOutput = z.infer<typeof GetAIImprovementSuggestionsOutputSchema>;

export async function getAIImprovementSuggestions(input: GetAIImprovementSuggestionsInput): Promise<GetAIImprovementSuggestionsOutput> {
  return getAIImprovementSuggestionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'getAIImprovementSuggestionsPrompt',
  input: {schema: GetAIImprovementSuggestionsInputSchema},
  output: {schema: GetAIImprovementSuggestionsOutputSchema},
  prompt: `You are an expert business consultant reviewing a Business Model Canvas (BMC). Provide specific, actionable suggestions for improving the BMC, referencing business best practices.

  Business Description: {{{businessDescription}}}

  BMC Data:
  {{#each bmcData}}
    {{@key}}: {{{this}}}
  {{/each}}
  `,
});

const getAIImprovementSuggestionsFlow = ai.defineFlow(
  {
    name: 'getAIImprovementSuggestionsFlow',
    inputSchema: GetAIImprovementSuggestionsInputSchema,
    outputSchema: GetAIImprovementSuggestionsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
